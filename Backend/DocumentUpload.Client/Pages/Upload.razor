@page "/upload"
@inject HttpClient Http
@inject IJSRuntime JsRuntime

<div class="main-container">
    <div class="card">
        <h2>File Upload</h2>

        <div class="upload-area">
            <InputFile OnChange="OnInputFileChange" class="file-input" accept=".pdf,.doc,.docx,.jpg,.png" />

            <label for="fileInput" class="file-label">
                @if (selectedFile != null)
                {
                    <span>Selected: @selectedFile.Name</span>
                }
                else
                {
                    <span>Choose a file</span>
                }
            </label>

            <button @onclick="UploadFile"
                    disabled="@(isUploading || selectedFile == null)"
                    class="btn-google mt-3">
                @if (isUploading)
                {
                    <span>Uploading...</span>
                }
                else
                {
                    <span>Upload File</span>
                }
            </button>
        </div>

        @if (!string.IsNullOrEmpty(message))
        {
            <div class="status-message @(alertClass.Contains("success") ? "success" : "error")">@message</div>
        }

        @if (uploadResult != null)
        {
            <div class="result-card">
                <h4 class="result-title">Upload Result</h4>
                <p class="result-value"><strong>File ID:</strong> @uploadResult.Id</p>
                <p class="result-value"><strong>File Name:</strong> @uploadResult.FileName</p>
                <p class="result-value"><strong>Size:</strong> @(uploadResult.Size / 1024) KB</p>
            </div>
        }
    </div>
</div>

@code {
    private IBrowserFile? selectedFile;
    private bool isUploading = false;
    private string message = string.Empty;
    private string alertClass = "alert-info";
    private UploadResult? uploadResult;

    private void OnInputFileChange(InputFileChangeEventArgs e)
    {
        selectedFile = e.File;
        message = string.Empty;
        uploadResult = null;
        StateHasChanged(); // Force UI update to show selected file name
    }

    private async Task UploadFile()
    {
        if (selectedFile == null) return;

        isUploading = true;
        message = "Uploading file...";
        alertClass = "alert-info";

        try
        {
            using var content = new MultipartFormDataContent();
            var stream = selectedFile.OpenReadStream(50 * 1024 * 1024); // 50MB max
            content.Add(new StreamContent(stream), "file", selectedFile.Name);

            var response = await Http.PostAsync("api/documents/upload", content);

            if (response.IsSuccessStatusCode)
            {
                uploadResult = await response.Content.ReadFromJsonAsync<UploadResult>();
                message = "File uploaded successfully!";
                alertClass = "alert-success";
            }
            else
            {
                message = $"Error: {await response.Content.ReadAsStringAsync()}";
                alertClass = "alert-danger";
            }
        }
        catch (Exception ex)
        {
            message = $"Upload failed: {ex.Message}";
            alertClass = "alert-danger";
        }
        finally
        {
            isUploading = false;
        }
    }

    private class UploadResult
    {
        public int Id { get; set; }
        public string FileName { get; set; } = string.Empty;
        public long Size { get; set; }
    }
}